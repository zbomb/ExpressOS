# Building docker image we use to build the OS
# Use 'docker build docker -t express-build-env' to build the docker image

# Run with 'docker run --rm -it -v <ProjectDir>:/root/env express-build-env'
FROM randomdude/gcc-cross-x86_64-elf

RUN  apt-get update 
RUN apt-get upgrade -y
RUN apt-get install -y nasm
RUN apt-get install -y grub-pc-bin
RUN apt-get install -y grub-common
RUN apt-get install -y grub-efi-amd64-bin
RUN apt-get install -y xorriso
RUN apt-get install -y mtools
RUN apt-get install -y git
RUN apt-get install -y gnu-efi
RUN apt-get install -y binutils-mingw-w64
RUN apt-get install -y gcc-mingw-w64

# Download prerequisits for building cross-compiler
RUN apt-get install -y bison
RUN apt-get install -y flex
RUN apt-get install -y libgmp3-dev
RUN apt-get install -y libmpc-dev
RUN apt-get install -y libmpfr-dev
RUN apt-get install -y texinfo
RUN apt-get install -y gcc-multilib

# Download binutils and gcc source
RUN mkdir -p /usr/local/src/
RUN mkdir -p /usr/local/src/gcc

RUN cd /usr/local/src
RUN wget -O binutils.tar.gz https://ftp.gnu.org/gnu/binutils/binutils-2.36.1.tar.gz
RUN tar -xf binutils.tar.gz
RUN rm binutils.tar.gz

RUN git clone git://gcc.gnu.org/git/gcc.git /usr/local/src/gcc

# Set some symbols
RUN mkdir -p /usr/local/cross
RUN export PREFIX="/usr/local/cross"
RUN export TARGET=x86_64-elf
RUN export PATH="$PREFIX/bin:$PATH"

# Build and install binutils
RUN mkdir -p /usr/local/src/build-binutils
RUN cd  /usr/local/src/build-binutils
RUN ../binutils-2.36.1/configure --target=$TARGET --prefix="$PREFIX" --with-sysroot --disable-nls --disable-werror
RUN make
RUN make install

# Build and isntall GCC
RUN mkdir -p /usr/local/src/build-gcc
RUN cd /usr/local/src/build-gcc
# TODO: This is hard to get executing properly, works while in the docker image, but in the dockerfile.. it throws an error
RUN ../gcc/configure --target=$TARGET --prefix="$PREFIX" --disable-nls --enable-languages=c,c++ --without-headers
RUN make all-gcc
RUN make all-target-libgcc CFLAGS_FOR_TARGET='-g -O2 -mcmodel=kernel -mno-red-zone' || true
RUN sed -i 's/PICFLAG/DISABLED_PICFLAG/g' $TARGET/libgcc/Makefile
RUN make all-target-libgcc CFLAGS_FOR_TARGET='-g -O2 -mcmodel=kernel -mno-red-zone'
RUN make install-gcc
RUN make install-target-libgcc
RUN cd ~

VOLUME /root/env
WORKDIR /root/env
